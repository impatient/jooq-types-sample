/*
 * This file is generated by jOOQ.
 */
package org.jooq.sample.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.sample.JooqSample;
import org.jooq.sample.tables.records.AllPersonsRecord;
import org.jooq.sample.udt.records.UdtAddressRecord;
import org.jooq.sample.udt.records.UdtPersonRecord;
import org.jooq.sample.udt.records.UdtPhoneRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AllPersons extends TableImpl<AllPersonsRecord> {

    private static final long serialVersionUID = -293064196;

    /**
     * The reference instance of <code>jooq_sample.all_persons</code>
     */
    public static final AllPersons ALL_PERSONS = new AllPersons();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AllPersonsRecord> getRecordType() {
        return AllPersonsRecord.class;
    }

    /**
     * The column <code>jooq_sample.all_persons.person</code>.
     */
    public final TableField<AllPersonsRecord, UdtPersonRecord> PERSON = createField(DSL.name("person"), org.jooq.sample.udt.UdtPerson.UDT_PERSON.getDataType(), this, "");

    /**
     * The column <code>jooq_sample.all_persons.addresses</code>.
     */
    public final TableField<AllPersonsRecord, UdtAddressRecord[]> ADDRESSES = createField(DSL.name("addresses"), org.jooq.sample.udt.UdtAddress.UDT_ADDRESS.getDataType().getArrayDataType(), this, "");

    /**
     * The column <code>jooq_sample.all_persons.phones</code>.
     */
    public final TableField<AllPersonsRecord, UdtPhoneRecord[]> PHONES = createField(DSL.name("phones"), org.jooq.sample.udt.UdtPhone.UDT_PHONE.getDataType().getArrayDataType(), this, "");

    /**
     * Create a <code>jooq_sample.all_persons</code> table reference
     */
    public AllPersons() {
        this(DSL.name("all_persons"), null);
    }

    /**
     * Create an aliased <code>jooq_sample.all_persons</code> table reference
     */
    public AllPersons(String alias) {
        this(DSL.name(alias), ALL_PERSONS);
    }

    /**
     * Create an aliased <code>jooq_sample.all_persons</code> table reference
     */
    public AllPersons(Name alias) {
        this(alias, ALL_PERSONS);
    }

    private AllPersons(Name alias, Table<AllPersonsRecord> aliased) {
        this(alias, aliased, new Field[0]);
    }

    private AllPersons(Name alias, Table<AllPersonsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AllPersons(Table<O> child, ForeignKey<O, AllPersonsRecord> key) {
        super(child, key, ALL_PERSONS);
    }

    @Override
    public Schema getSchema() {
        return JooqSample.JOOQ_SAMPLE;
    }

    @Override
    public AllPersons as(String alias) {
        return new AllPersons(DSL.name(alias), this, parameters);
    }

    @Override
    public AllPersons as(Name alias) {
        return new AllPersons(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public AllPersons rename(String name) {
        return new AllPersons(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public AllPersons rename(Name name) {
        return new AllPersons(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UdtPersonRecord, UdtAddressRecord[], UdtPhoneRecord[]> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public AllPersons call() {
        return new AllPersons(DSL.name(getName()), null, new Field[] { 
        });
    }
}
