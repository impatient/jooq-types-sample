/*
 * This file is generated by jOOQ.
 */
package org.jooq.sample.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.sample.Indexes;
import org.jooq.sample.JooqSample;
import org.jooq.sample.Keys;
import org.jooq.sample.tables.records.PhoneRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Phone extends TableImpl<PhoneRecord> {

    private static final long serialVersionUID = -1676111949;

    /**
     * The reference instance of <code>jooq_sample.phone</code>
     */
    public static final Phone PHONE = new Phone();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PhoneRecord> getRecordType() {
        return PhoneRecord.class;
    }

    /**
     * The column <code>jooq_sample.phone.id</code>.
     */
    public final TableField<PhoneRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('shared_sequence'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>jooq_sample.phone.person_id</code>.
     */
    public final TableField<PhoneRecord, Long> PERSON_ID = createField(DSL.name("person_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>jooq_sample.phone.priority</code>.
     */
    public final TableField<PhoneRecord, Integer> PRIORITY = createField(DSL.name("priority"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>jooq_sample.phone.digits</code>.
     */
    public final TableField<PhoneRecord, String> DIGITS = createField(DSL.name("digits"), org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * Create a <code>jooq_sample.phone</code> table reference
     */
    public Phone() {
        this(DSL.name("phone"), null);
    }

    /**
     * Create an aliased <code>jooq_sample.phone</code> table reference
     */
    public Phone(String alias) {
        this(DSL.name(alias), PHONE);
    }

    /**
     * Create an aliased <code>jooq_sample.phone</code> table reference
     */
    public Phone(Name alias) {
        this(alias, PHONE);
    }

    private Phone(Name alias, Table<PhoneRecord> aliased) {
        this(alias, aliased, null);
    }

    private Phone(Name alias, Table<PhoneRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Phone(Table<O> child, ForeignKey<O, PhoneRecord> key) {
        super(child, key, PHONE);
    }

    @Override
    public Schema getSchema() {
        return JooqSample.JOOQ_SAMPLE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PHONE_PKEY);
    }

    @Override
    public Identity<PhoneRecord, Long> getIdentity() {
        return Keys.IDENTITY_PHONE;
    }

    @Override
    public UniqueKey<PhoneRecord> getPrimaryKey() {
        return Keys.PHONE_PKEY;
    }

    @Override
    public List<UniqueKey<PhoneRecord>> getKeys() {
        return Arrays.<UniqueKey<PhoneRecord>>asList(Keys.PHONE_PKEY);
    }

    @Override
    public List<ForeignKey<PhoneRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PhoneRecord, ?>>asList(Keys.PHONE__PHONE_PERSON_ID_FKEY);
    }

    public Person person() {
        return new Person(this, Keys.PHONE__PHONE_PERSON_ID_FKEY);
    }

    @Override
    public Phone as(String alias) {
        return new Phone(DSL.name(alias), this);
    }

    @Override
    public Phone as(Name alias) {
        return new Phone(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Phone rename(String name) {
        return new Phone(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Phone rename(Name name) {
        return new Phone(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
